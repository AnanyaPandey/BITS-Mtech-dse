
# difference between a list and a tuple?  
lists are mutable - heir elements and size can be changed., tuples are immutable.
Lists are enclosed with in square []
Lists are slower than tuples

# dictionary comprehension : 
We can also make dictionary from a list using comprehension

>>> keys = ['a','b','c','d','e']
>>> values = [1,2,3,4,5]
>>> myDict = { k:v for (k,v) in zip(keys, values)}
>>> myDict
{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}

myDict = {x: x**2 for x in range(5)}
{0: 1, 1: 4, 2: 9, 3: 16, 4: 25}

>>> my = {x.upper():3*x for x in 'hhhheeeelllllooooooossssssss'}
>>> my
{'H': 'hhh', 'E': 'eee', 'L': 'lll', 'O': 'ooo', 'S': 'sss'}

>>> a= list('coding')
>>> a
['c', 'o', 'd', 'i', 'n', 'g']
>>> test = {x:a[x] for x in range(5)}
>>> test
{0: 'c', 1: 'o', 2: 'd', 3: 'i', 4: 'n'}

###############################

#What is tuple unpacking? Why is it important?

A tuple can be unpacked in sense its elements can be separated 
Tuple unpacking helps to separate each value one at a time

>>> fruits = ('apple','banana','kiwi')
>>> (red,yellow,green) = fruits
>>> red
'apple'
>>>type(red)
<class 'str'>

# we can save a list using * 
fruits = ("apple", "banana", "cherry", "strawberry", "raspberry","kiwi","jackfruit","lemon")
(red,yellow,*otherfruits) = fruits

>>> otherfruits
['cherry', 'strawberry', 'raspberry', 'kiwi', 'jackfruit', 'lemon']

# wehen u have a long tuple but only a few are important.
===============================================
difference between is and ‘==’ ?
‘==’ checks for equality between the variables, and ‘is’ checks for the identity of the variables.

difference between indexing and slicing?
Indexing is extracting or lookup one or particular values in a data structure, whereas slicing retrieves a sequence of elements.

zip() and enumerate() function.
zip() - returns zip object 
The zip() function takes multiple lists as input and creates those into a single list of tuples.
 It does so by taking the corresponding elements of each of the lists as a parameter. It continues this process until it finds the pairs of the tuples.

l1 = ['A', 'B','C','D']
l2 = [50,100, 150, 200]

list(zip(l1, l2)) 
[(‘A’,50), (‘B’,100), (’C’,150), (’D’,200)] 

>>> a = [1,2,3,4]
[1, 2, 3, 4]
>>> b = list('coding')
['c', 'o', 'd', 'i', 'n', 'g']
>>> list(zip(a,b))
[(1, 'c'), (2, 'o'), (3, 'd'), (4, 'i')]

enumerate() function also takes a list as input and creates a list of tuples. 
However, its output is: the first element of the tuple is the position of that element in the list and the second element of the tuple is the actual value of the element in the list.

list2 = [“apple”,”ball”,”cat”]
list(enumerate(list2))

Output: [(0, ‘apple’), (1, ball’), (2, ‘cat’)]
========================================

What is the difference between range, xrange, and range?

range(): returns a Python list object, which is of integers. It is a function of BASE python.
xrange(): returns a range object.
arange(): is a function in Numpy library. It can return fractional values as well.

np.arange(1,10,0.5) range from 1 to 10 with step size 0.5, 1,1.5, ------ 9.5
============================================

difference between pass, continue and break?
Pass: It is used when you need some block of code syntactically, but you want to skip its execution. This is basically a null operation. Nothing happens when this is executed.

Continue: It allows to skip some part of a loop when some specific condition is met, and the control is transferred to the beginning of the loop.The loop does not terminate but continues with the next iteration.

Break: It allows the loop to terminate when some condition is met, and the control of the program flows to the  statement immediately after the body of the loop.

==============================================

Regular Expression or RegEx is a sequence of characters that are used to create search patterns. In Python, the following RegEx functions are mostly used:

    match(): it checks for a match only at the beginning of the string.
    search(): it locates a substring matching the RegEx pattern anywhere in the string 
    sub(): searches for the pattern and replaces with a new value
    split(): it is used to split the text by the given RegEx pattern.
    findall(): it is used to find all the sub-strings matching the RegEx pattern

==============================================

What does *args, **kwargs mean? When are these used?

*args and *kwargs are keywords that allow a function to take the variable-length argument.
It reads the value one by one and prints the value
It is used when we are not sure of how many arguments will be passed to a function.
The symbol * is used to indicate to take in a variable number of arguments

*kwargs:

    It is used to pass a keyworded, variable-length argument list
    It is used when we do not know how many keyword arguments to be passed to a function
    The symbol ** is to indicate pass through keyword argument
    This helps to unpack a dictionary

def myFun(arg1, *argv):
    print ("First argument :", arg1)
    for arg in argv:
        print("Next argument through *argv :", arg)
myFun('Hello', 'hi', 'to', 'ev','goo','bar')

Using *args and **kwargs to call a function

def myFun(arg1, arg2, arg3):
    print("arg1:", arg1)
    print("arg2:", arg2)
    print("arg3:", arg3)
	
args = ("im", "for", "you")
myFun(*args)


================================================

# What is the use of the With statement?
With statement helps in exception handling and also in processing the files when used with an open file.  Using this way:

with open(“filename,” “mode”) as file_name: 

We can open and process the file, and we do not need to close the file explicitly. Post the with block exists., then the file object is closed. The With statement is resourceful and ensures that the file stream process is not stopped, and in case an exception is raised, it ends properly.


===============================================

# exception handling

Try tries to execute the code that belongs to it.

Except is used after the try block and catches all the specific errors which would appear on running the codes under the try block.

==============================================

 difference between lists and arrays?
An array is a data structure that contains a group of elements where the elements are of the same data type, e.g., integer, string

===============================================

.iloc and .loc?

iloc = 
It is referred to as the internal index: 0,1,2…, (n-1)
It is only for the indexes.


.loc
It is referred to as the external, labeled, or custom index.
It is only for the labels
the upper bound is included.

>>> name
['ran', 'rob', 'jack', 'bob', 'steve']
>>> age
[12, 16, 17, 17, 18]
>>> gender
['m', 'm', 'm', 'f', 'f']
>>> df = pd.DataFrame(list(zip(name,age,gender)), columns=['name','age','gender'])

>>> df.loc[(df.age>10) & (df.gender=='M') ]
   age section    city gender favourite_color
3   21       B   Delhi      M             NaN
4   12       B  Mumbai      M           black
5   11       A   Delhi      M           green

df.loc[rows,col]
df.loc[1:3,['age','gender']]
data.loc[(data.age >= 12), ['city', 'gender']] # chose from these columns where condition age >= 12

Updating the data also possible :  

data.loc[(data.age >= 12), ['section']] = 'F'
 data.loc[(data.age >= 20), ['section', 'city']] = ['A','Pune']

# ILOC : 

 Selecting Rows : 
 data.iloc[[0,2]]
 
 data.iloc[3:22] 
 data.iloc[[0,2],[1,3]]
 
 ======================================================
 
 # Merge join and concatenate (0
 
 
    MERGE for combining data on common columns or indices - similar to sql join 
	Good for combining rows that share data. (left - right type of join )
	
	dataframe.merge(right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)
	newmerged = pd.merge(left_df, right_df, how='outer', on = ['column1','column2'])
	
	how - Default 'inner'. Specifies how to merge (inner outer left right)
	on - Specifies in what level to do the merging
	left_on - Specifies in what level to do the merging on the DataFrame to the left
	right_on - pecifies in what level to do the merging on the DataFrame to the right
	sort - Specifies whether to sort the DataFrame by the join key or not
	
    * join() for combining data on a key column or an index
    * concat() for combining DataFrames across rows or columns

df1 = pd.DataFrame(
   {'id':[1,2,3,4,5],
   'Name': ['Billy', 'Brian', 'Bran', 'Bryce', 'Betty'],
   'subject_id':['sub2','sub4','sub3','sub6','sub5']})
   
df2 = pd.DataFrame({
   'id':[1,2,3,4,5],
   'Name': ['Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'],
   'subject_id':['sub1','sub2','sub4','sub6','sub5']})
   
>>> left
  key    Name  Age
0  K0     Jai   27
1  K1  Princi   24
2  K2  Gaurav   22
3  K3    Anuj   32

>>> right
  key    Address Qualification
0  K0     Nagpur         Btech
1  K1     Kanpur           B.A
2  K2  Allahabad          Bcom
3  K3    Kannuaj        B.hons

>>> pd.merge(left, right, on='key')
  key    Name  Age    Address Qualification
0  K0     Jai   27     Nagpur         Btech
1  K1  Princi   24     Kanpur           B.A
2  K2  Gaurav   22  Allahabad          Bcom
3  K3    Anuj   32    Kannuaj        B.hons
--------------------------------------------------

>>> d1
  key key1    Name  Age
0  K0   K0     Jai   27
1  K1   K1  Princi   24
2  K2   K0  Gaurav   22
3  K3   K1    Anuj   32
>>> d2
  key key1    Address Qualification
0  K0   K0     Nagpur         Btech
1  K1   K0     Kanpur           B.A
2  K2   K0  Allahabad          Bcom
3  K3   K0    Kannuaj        B.hons
>>> pd.merge(d1, d2, on=['key', 'key1']) # default how = inner
  key key1    Name  Age    Address Qualification
0  K0   K0     Jai   27     Nagpur         Btech
1  K2   K0  Gaurav   22  Allahabad          Bcom
>>> pd.merge(d1, d2, on=['key', 'key1'],how='left')
  key key1    Name  Age    Address Qualification
0  K0   K0     Jai   27     Nagpur         Btech
1  K1   K1  Princi   24        NaN           NaN
2  K2   K0  Gaurav   22  Allahabad          Bcom
3  K3   K1    Anuj   32        NaN           NaN
 
JOIN 
=============

While merge() is a module function, .join() is an instance method that lives on your DataFrame. This enables you to specify only one DataFrame, which will join the DataFrame you call .join() on. Under the hood, .join() uses merge(), but it provides a more efficient way to join

The join method takes two dataframes and joins them on their indexes (technically, you can pick the column to join on for the left dataframe). If there are overlapping columns, the join will want you to add a suffix to the overlapping column name from the left dataframe. Our two dataframes do have an overlapping column name P

on - specifies an optional column or index name for the left DataFrame
how - how has the same options as how from merge(). The difference is that it’s index-based unless you also specify columns with on. how{‘left’, ‘right’, ‘outer’, ‘inner’}, default ‘left’
sort - sort can be enabled to sort the resulting DataFrame by the join key.
lsuffix: str, - Suffix to use from left frame’s overlapping columns.
rsuffix: str, - Suffix to use from right frame’s overlapping columns.

>>> df
      Name  Age
K0     Jai   27
K1  Princi   24
K2  Gaurav   22
K3    Anuj   32
>>> df1
      Address Qualification
K0  Allahabad           MCA
K2    Kannuaj           Phd
K3  Allahabad          Bcom
K4    Kannuaj        B.hons
>>> df.join(df1)
      Name  Age    Address Qualification
K0     Jai   27  Allahabad           MCA
K1  Princi   24        NaN           NaN
K2  Gaurav   22    Kannuaj           Phd
K3    Anuj   32  Allahabad          Bcom

>>> df.join(df1, how='outer')
      Name   Age    Address Qualification
K0     Jai  27.0  Allahabad           MCA
K1  Princi  24.0        NaN           NaN
K2  Gaurav  22.0    Kannuaj           Phd
K3    Anuj  32.0  Allahabad          Bcom
K4     NaN   NaN    Kannuaj        B.hons

CONCAT
==========================
Combining Data Across Rows or Columns WE can add two dfs across rows and across columns,

concatenated = pd.concat(objs, axis, join, ignore_index, keys, levels, names, verify_integrity, sort, copy)
# When Indexes are completely different.

pd.concat([series1, series2]))
>>> df
     Name  Age    Address Qualification
0     Jai   27     Nagpur           Msc
1  Princi   24     Kanpur            MA
2  Gaurav   22  Allahabad           MCA
3    Anuj   32    Kannuaj           Phd
>>> df1
     Name  Age    Address Qualification
4    Abhi   17     Nagpur         Btech
5  Ayushi   14     Kanpur           B.A
6  Dhiraj   12  Allahabad          Bcom
7  Hitesh   52    Kannuaj        B.hons
>>> pd.concat([df,df1])
     Name  Age    Address Qualification
0     Jai   27     Nagpur           Msc
1  Princi   24     Kanpur            MA
2  Gaurav   22  Allahabad           MCA
3    Anuj   32    Kannuaj           Phd
4    Abhi   17     Nagpur         Btech
5  Ayushi   14     Kanpur           B.A
6  Dhiraj   12  Allahabad          Bcom
7  Hitesh   52    Kannuaj        B.hons


# INDEXES different 

>>> df
     Name  Age    Address Qualification  Mobile No
0     Jai   27     Nagpur           Msc         97
1  Princi   24     Kanpur            MA         91
2  Gaurav   22  Allahabad           MCA         58
3    Anuj   32    Kannuaj           Phd         76
>>> df1
     Name  Age    Address Qualification  Salary
2  Gaurav   22  Allahabad           MCA    1000
3    Anuj   32    Kannuaj           Phd    2000
6  Dhiraj   12  Allahabad          Bcom    3000
7  Hitesh   52    Kannuaj        B.hons    4000
>>>
>>> pd.concat([df, df1]) # Rows are added separately axis=0 by default, join = inner by default
     Name  Age    Address Qualification  Mobile No  Salary
0     Jai   27     Nagpur           Msc       97.0     NaN
1  Princi   24     Kanpur            MA       91.0     NaN
2  Gaurav   22  Allahabad           MCA       58.0     NaN
3    Anuj   32    Kannuaj           Phd       76.0     NaN
2  Gaurav   22  Allahabad           MCA        NaN  1000.0
3    Anuj   32    Kannuaj           Phd        NaN  2000.0
6  Dhiraj   12  Allahabad          Bcom        NaN  3000.0
7  Hitesh   52    Kannuaj        B.hons        NaN  4000.0

pd.concat([df, df1], axis=1, join='inner')
>>> pd.concat([df, df1], axis=1, join='outer')
     Name   Age    Address Qualification  Mobile No    Name   Age    Address Qualification  Salary
0     Jai  27.0     Nagpur           Msc       97.0     NaN   NaN        NaN           NaN     NaN
1  Princi  24.0     Kanpur            MA       91.0     NaN   NaN        NaN           NaN     NaN
2  Gaurav  22.0  Allahabad           MCA       58.0  Gaurav  22.0  Allahabad           MCA  1000.0
3    Anuj  32.0    Kannuaj           Phd       76.0    Anuj  32.0    Kannuaj           Phd  2000.0
6     NaN   NaN        NaN           NaN        NaN  Dhiraj  12.0  Allahabad          Bcom  3000.0
7     NaN   NaN        NaN           NaN        NaN  Hitesh  52.0    Kannuaj        B.hons  4000.0
===================================

>>> df1
    A   B
0  A0  B0
1  A1  B1
2  A2  B2
3  A3  B3
>>> df2
    A   B
0  A4  B4
1  A5  B5
2  A6  B6
3  A7  B7
>>> pd.concat([df1,df2], keys = ['k1','k2'])
       A   B
k1 0  A0  B0
   1  A1  B1
   2  A2  B2
   3  A3  B3
k2 0  A4  B4
   1  A5  B5
   2  A6  B6
   3  A7  B7
   
=====================================================================\

# ways to reshape a pandas dataframe? 

    stack(): reshaping via stack() converts the data into stacked form that is the columns are stacked row wise.
    unstack(): is reverse of stacking. This function is used to unstack the row to columns.
    melt(): The function is used to manage the data frame into a format where one or more columns are identifier variables.


Stack - Return a reshaped DataFrame or Series having a multi-level index with one or more new inner-most levels compared to the current DataFrame. The new inner-most levels are created by pivoting the columns of the current dataframe:

>>> d1
     Name  Age
0     Jai   27
1  Princi   24
2  Gaurav   22
3    Anuj   32
>>> d1.stack()
0  Name       Jai
   Age         27
1  Name    Princi
   Age         24
2  Name    Gaurav
   Age         22
3  Name      Anuj
   Age         32
dtype: object

melt  - pandas.melt(frame, id_vars=None, value_vars=None,
 var_name=None, value_name='value', col_level=None)
 
 frame : DataFrame
id_vars[tuple, list, or ndarray, optional] : Column(s) to use as identifier variables.
value_vars[tuple, list, or ndarray, optional]: Column(s) to unpivot. If not specified, uses all columns that are not set as id_vars.
var_name[scalar]: Name to use for the ‘variable’ column. If None it uses frame.columns.name or ‘variable’.
value_name[scalar, default ‘value’]: Name to use for the ‘value’ column.
col_level[int or string, optional]: If columns are a MultiIndex then use this level to melt

>>>
>>> new
     Name    Course  Age
0    John   Masters   27
1     Bob  Graduate   23
2  Shiela  Graduate   21

# keep id as name and value as course (age will be removed)
# convert column to row 

>>> pd.melt(new, id_vars =['Name'], value_vars =['Course'])
     Name variable     value
0    John   Course   Masters
1     Bob   Course  Graduate
2  Shiela   Course  Graduate

# keep id as name and values as course and age both - 
>>> pd.melt(new, id_vars =['Name'], value_vars =['Course', 'Age'])
     Name variable     value
0    John   Course   Masters
1     Bob   Course  Graduate
2  Shiela   Course  Graduate
3    John      Age        27
4     Bob      Age        23
5  Shiela      Age        21


>>> pd.melt(new, id_vars =['Name'], value_vars =['Course'],
...               var_name ='ChangedVarname', value_name ='ChangedValname')

     Name ChangedVarname ChangedValname
0    John         Course        Masters
1     Bob         Course       Graduate
2  Shiela         Course       Graduate

>>> pd.melt(new, id_vars=["Name", "Course"], value_vars=["Age"])
     Name    Course variable  value
0    John   Masters      Age     27
1     Bob  Graduate      Age     23
2  Shiela  Graduate      Age     21